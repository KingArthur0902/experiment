<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
              http://www.springframework.org/schema/beans
              http://www.springframework.org/schema/beans/spring-beans.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context-4.2.xsd"
       default-lazy-init="false">

    <context:component-scan base-package="com.**.dao"/>

    <!--jdbcTemplate 方便使用jdbc-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--hibernate的会话工厂-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="packagesToScan">
            <list>
                <value>com.threadblocked.experiment.**.domain</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${app.dataSource.hibernateDialect}</prop>
                <prop key="hibernate.show_sql">${app.hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.use_sql_comments">false</prop>
                <prop key="hibernate.default_batch_fetch_size">20</prop>
                <prop key="hibernate.max_fetch_depth">200</prop>
                <prop key="hibernate.id.new_generator_mappings">false</prop>
                <prop key="hibernate.hbm2ddl.auto">#{
				systemProperties['app.hibernate.db.hbm2ddl'] == null ?
				'${app.hibernate.db.hbm2ddl:none}' == 'create-once' ? 'create' : '${app.hibernate.db.hbm2ddl:none}' :
                    systemProperties['app.hibernate.db.hbm2ddl']
                    }
                </prop>
                <prop key="hibernate.default_schema">${app.dataSource.schema}</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="org.hibernate.cache.ehcache.configurationResourceName">/ehcache/ehcache-hibernate.xml</prop>
                <!--使用druid实现的provider，不知道为何，不配置这条的话，创建transactionManager 报错，待后续继续观察-->
                <prop key="hibernate.connection.provider_class">com.alibaba.druid.support.hibernate.DruidConnectionProvider</prop>
            </props>
        </property>
    </bean>

    <!--配置hibernate的事务管理器，需要注入sessionFactory-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="prepareConnection" value="false"/>
    </bean>

    <!--TransactionTemplate，方便编程式事务控制-->
    <bean id="txTpl" class="org.springframework.transaction.support.TransactionTemplate" scope="prototype">
        <constructor-arg ref="transactionManager"/>
    </bean>

</beans>